#version 450
#extension GL_ARB_separate_shader_objects : enable

precision highp float;

layout(binding = 1) uniform sampler2D baseColorSampler;
layout(binding = 2) uniform sampler2D emissiveSampler;
layout(binding = 3) uniform sampler2D normalSampler;
layout(binding = 4) uniform sampler2D metallicRoughnessSampler;
layout(binding = 5) uniform sampler2D occlusionSampler;

layout(location = 0) in vec3 fragPosition;
layout(location = 1) in vec3 fragNormal;
layout(location = 2) in vec2 fragTexCoord;

layout(location = 0) out vec4 outColor;

const float M_PI = 3.141592653589793;

struct PBRInfo {
	float NdotL;
	float NdotV;
	float NdotH;
	float LdotH;
	float VdotH;
	float roughness;
	float metallic;
	vec3 reflectance0;
	vec3 reflectance90;
	float alphaRoughness;
	vec3 diffuseColor;
	vec3 specularColor;
};


vec4 SRGBtoLINEAR(vec4 srgbIn) {
	vec3 linOut = pow(srgbIn.xyz, vec3(2.2));
	return vec4(linOut, srgbIn.w);
}

vec3 getNormal() {
	vec3 pos_dx = dFdx(fragPosition);
	vec3 pos_dy = dFdy(fragPosition);
	vec3 tex_dx = dFdx(vec3(fragTexCoord, 0.0));
	vec3 tex_dy = dFdy(vec3(fragTexCoord, 0.0));
	vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

	vec3 ng = normalize(fragNormal);
	t = normalize(t - ng * dot(ng, t));
	vec3 b = normalize(cross(ng, t));
	mat3 tbn = mat3(t, b, ng);

	vec3 n = texture(normalSampler, fragTexCoord).rgb;

	float normalScale = 1.0;
	n = normalize(tbn * ((2.0 * n - 1.0) * vec3(normalScale, normalScale, 1.0)));

	return n;
}

vec3 specularReflection(PBRInfo pbrInputs) {
	return pbrInputs.reflectance0
		+ (pbrInputs.reflectance90 - pbrInputs.reflectance0)
			* pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
}

float geometricOcclusion(PBRInfo pbrInputs) {
	float NdotL = pbrInputs.NdotL;
	float NdotV = pbrInputs.NdotV;
	float r = pbrInputs.alphaRoughness;

	float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
	float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
	return attenuationL * attenuationV;
}

float microfacetDistribution(PBRInfo pbrInputs) {
	float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
	float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
	return roughnessSq / (M_PI * f * f);
}

vec3 diffuse(PBRInfo pbrInputs) {
	return pbrInputs.diffuseColor / M_PI;
}

void main() {
	float metallicFactor = 1.0;
	float roughnessFactor = 1.0;
	vec4 mrSample = texture(metallicRoughnessSampler, fragTexCoord);
	float metallic = mrSample.b * metallicFactor;
	float roughness = mrSample.g * roughnessFactor;
	roughness = clamp(roughness, 0.04, 1.0);
	metallic = clamp(metallic, 0.0, 1.0);
	float alphaRoughness = roughness * roughness;

	vec4 baseColorFactor = vec4(1.0);
    vec4 baseColor = SRGBtoLINEAR(texture(baseColorSampler, fragTexCoord)) * baseColorFactor;

	vec3 f0 = vec3(0.04);
	vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
	diffuseColor *= 1.0 - metallic;
	vec3 specularColor = mix(f0, baseColor.rgb, metallic);

	float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);
	float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
	vec3 specularEnvironmentR0 = specularColor.rgb;
	vec3 specularEnvironmentR90 = vec3(1.0) * reflectance90;

	vec3 camera = vec3(0.0, 0.0, 3.0);
	vec3 lightDirection = vec3(1.0, 2.0, 2.0);
	vec3 n = getNormal();
	vec3 v = normalize(camera - fragPosition);
	vec3 l = normalize(lightDirection);
	vec3 h = normalize(l + v);
	vec3 reflection = -normalize(reflect(v, n));

	float NdotL = clamp(dot(n, l), 0.001, 1.0);
	float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
	float NdotH = clamp(dot(n, h), 0.0, 1.0);
	float LdotH = clamp(dot(l, h), 0.0, 1.0);
	float VdotH = clamp(dot(v, h), 0.0, 1.0);

	PBRInfo pbrInputs = PBRInfo(
		NdotL,
		NdotV,
		NdotH,
		LdotH,
		VdotH,
		roughness,
		metallic,
		specularEnvironmentR0,
		specularEnvironmentR90,
		alphaRoughness,
		diffuseColor,
		specularColor
	);

	vec3 F = specularReflection(pbrInputs);
	float G = geometricOcclusion(pbrInputs);
	float D = microfacetDistribution(pbrInputs);

	vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);
	vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);

	vec3 lightColor = vec3(5.0);
	vec3 color = NdotL * lightColor * (diffuseContrib + specContrib);

	float ao = texture(occlusionSampler, fragTexCoord).r;
	float occlusionStrength = 1.0;
	color = mix(color, color * ao, occlusionStrength);

	float emissiveFactor = 1.0;
	vec3 emissive = SRGBtoLINEAR(texture(emissiveSampler, fragTexCoord)).rgb * emissiveFactor;
	color += emissive;

	outColor = vec4(pow(color, vec3(1.0 / 2.2)), baseColor.a);
}

